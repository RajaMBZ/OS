Name(s): M. Bakhtiar Zuberi
Roll No: SP18-BCS-086
Lab assignment No.2 and No.3

Rate Monotonic
Code:

	#include <stdio.h>
	#include <algorithm>
	#include <vector>
	#include <iomanip>
	

	typedef struct {
	    int p_Id;
	    int ex;
	    int pr;
	    int rt;
	    int ready;
	}Process;
	

	using namespace std;
	

	bool cmp (Process a , Process b){
	    return(a.pr < b.pr);
	}
	

	int find_lcm(vector <Process> data , int limit){
	    int maax1 , maax2 , counter=1;
	    bool notfound=true;
	    maax2=maax1=data[limit-1].pr;
	    while(notfound){
	        for(int j=0 ; j<limit-1 ; j++){
	            if(!(maax2%data[j].pr));
	            else break;
	            if(j==(limit-2)){
	                notfound=false;
	                break;
	            }
	        }
	        if(!notfound)
	            break;
	        else{
	           maax2 = maax1*(++counter);
	        }
	    }
	    return maax2;
	}
	int main()
	{
	    int no , ex , pr , lcm;
	    double utilization=0;
	    int totalExecutionTime=0;
	    vector <Process> data;
	    Process temp;
	    cout << "please enter number of processes " << endl;
	    cin >> no;
	    cout << "please enter the data for each process" << endl;
	

	    for(int i=1 ; i<=no ; i++){
	        cout << "P" << i << " \n" << "Execution time : ";
	        cin >> ex ;
	        cout << "Period : ";
	        cin >> pr;
	        cout << endl;
	        temp.p_Id=i;
	        temp.ex=ex;
	        temp.pr=pr;
	        temp.ready=1;
	        temp.rt=ex;
	        data.push_back(temp);
	    }
	

	    sort(data.begin() , data.end() , cmp);
	    lcm=find_lcm(data , no);
	

	    cout << "Process No.\t\tExecution time \t\t Period" << endl;
	    for(int i=0 ; i<no ; i++){
	        totalExecutionTime+=(lcm/data[i].pr)*data[i].ex;
	        cout <<"    "<< data[i].p_Id << "\t\t\t\t" << data[i].ex << "\t\t    " << data[i].pr<< endl;
	    }
	

	    if(totalExecutionTime > lcm){
	        cout <<"\n\nTotal execution time is more than LCM so RMS is not feasible here" << endl;
	        return 0;
	    }
	

	    utilization=(totalExecutionTime*1.0/lcm) *100;
	    cout << setprecision(4)<<"\n\nUtilization = " << utilization << "%\n";
	

	    cout << "\n\nLCM = " << lcm << endl;
	    cout <<"\n  Time" << "\t\t Running Process\n";
	    for(int i=0 ; i<lcm ; i++){
	        if(i>=data[0].pr)//re-new process at each period
	            for(int j=0 ; j<no ; j++){
	                if(!(i%data[j].pr))//if period re-newed
	                    data[j].ready=1;//set it ready
	            }
	        for(int j=0 ; j<no ; j++){
	            if(data[j].ready){//ready
	                if(data[j].rt){//has remaining execution time
	                    if(!(--(data[j].rt))){//reduce remaining execution time and check it
	                        data[j].ready=0;//put status waiting
	                        data[j].rt=data[j].ex;//reset remaining time
	                    }
	                }
	                cout << "   " << i << "\t\t\tP" << data[j].p_Id<< endl;
	                break;
	            }
	        }
	    }
	    return 0;
	}


Example:
 
Gantt chart:
 

Earliest Deadline First
Code:
#include<cstdio>
#include<algorithm>
using namespace std;
struct process{
	char pr;
	int A,ex,end,S;
}P[10];
void get(int i){
	scanf("%c%d%d%d\n",&P[i].pr,&P[i].A,&P[i].ex,&P[i].S);
	P[i].end = P[i].A + P[i].ex;	
}
void move(int i, int j){
	if (i+1==j) swap(P[i],P[j]);
	else{
		process temp = P[j];
		while(j<i){
			P[j] = P[j-1];
			j--;
		}
		P[i] = temp;
	}
}
void reOrder(int N){
	int current_end = P[0].end;
	for(int i=1;i<N;i++){
		if(P[i].S < current_end) P[i].A = -1; //Process misses the Starting deadline
		else if(P[i].A < current_end){
			if (i != N-1){
				int j=i+1, min = i;
				while(P[j].A<=current_end && j<N){
					if(P[j].S<P[min].S) min = j;
					j++;
				}
				move(i,min);
				P[i].A = current_end;
				P[i].end = P[i].A + P[i].ex;
				current_end = P[i].end;
			}else{
				P[i].A = current_end;
				P[i].end = P[i].A + P[i].ex;
				current_end = P[i].end;
			}
		}else if(P[i].A > current_end){
				P[i].end = P[i].A + P[i].ex;
				current_end = P[i].end;			
	}	}
}
void put(int N){
	printf("PROCESS\tSTART-TIME\tEND-TIME\n");
	for(int i=0;i<N;i++){
		if(P[i].A == -1) printf("-----------%c misses------------\n",P[i].pr);
		else printf("%c\t%d\t\t%d\n",P[i].pr,P[i].A,P[i].end);
	}
}
int main(){
	int N;
	scanf("%d\n",&N);
	for(int i=0;i<N;i++) get(i);
	sort(P,P+N); //Sorting the process according to arrival time. 
	reOrder(N); //Scheduling the process according to EDF
	put(N);	
	return 0;
}

Gantt chart:
 
of:
 
Bankerâ€™s Algorithm

Code:

#include<iostream> 
using namespace std; 
const int P = 5; //total number of process
const int R = 3; //total number of resources

// Function to find the need of each process 
void calculateNeed(int need[P][R], int maxm[P][R], 
                   int allot[P][R]) 
{ 
    // Calculating Need of each P 
    for (int i = 0 ; i < P ; i++) 
        for (int j = 0 ; j < R ; j++) 
  
            // Need of instance = maxm instance - 
            //                    allocated instance 
            need[i][j] = maxm[i][j] - allot[i][j]; 
} 
  
// Function to find the system is in safe state or not 
bool isSafe(int processes[], int avail[], int maxm[][R], 
            int allot[][R]) 
{ 
    int need[P][R]; 
  
    // Function to calculate need matrix 
    calculateNeed(need, maxm, allot); 
  
    // Mark all processes as infinish 
    bool finish[P] = {0}; 
  
    // To store safe sequence 
    int safeSeq[P]; 
  
    // Make a copy of available resources 
    int work[R]; 
    for (int i = 0; i < R ; i++) 
        work[i] = avail[i]; 
  
    // While all processes are not finished 
    // or system is not in safe state. 
    int count = 0; 
    while (count < P) 
    { 
        // Find a process which is not finish and 
        // whose needs can be satisfied with current 
        // work[] resources. 
        bool found = false; 
        for (int p = 0; p < P; p++) 
        { 
            // First check if a process is finished, 
            // if no, go for next condition 
            if (finish[p] == 0) 
            { 
                // Check if for all resources of 
                // current P need is less 
                // than work 
                int j; 
                for (j = 0; j < R; j++) 
                    if (need[p][j] > work[j]) 
                        break; 
  
                // If all needs of p were satisfied. 
                if (j == R) 
                { 
                    // Add the allocated resources of 
                    // current P to the available/work 
                    // resources i.e.free the resources 
                    for (int k = 0 ; k < R ; k++) 
                        work[k] += allot[p][k]; 
  
                    // Add this process to safe sequence. 
                    safeSeq[count++] = p; 
  
                    // Mark this p as finished 
                    finish[p] = 1; 
  
                    found = true; 
                } 
            } 
        } 
        if (found == false) 
        { 
            cout << "System is not in safe state"; 
            return false; 
        } 
    } 
  
    cout << "System is in safe state.\nSafe"
         " sequence is: "; 
    for (int i = 0; i < P ; i++) 
        cout << safeSeq[i] << " "; 
  
    return true; 
} 
  
// Driver code 
int main() 
{ 
    int processes[] = {0, 1, 2, 3, 4}; 
  
    // Available instances of resources 
    int avail[] = {3, 3, 2}; 
  
    int maxm[][R] = {{7, 5, 3}, 
                     {3, 2, 2}, 
                     {9, 0, 2}, 
                     {2, 2, 2}, 
                     {4, 3, 3}};   
    int allot[][R] = {{0, 1, 0}, 
                      {2, 0, 0}, 
                      {3, 0, 2}, 
                      {2, 1, 1}, 
                      {0, 0, 2}}; 
  
    // Check system is in safe state or not 
    isSafe(processes, avail, maxm, allot); 
  
    return 0; 
}


